@use "sass:math";
// === RESPOND ABOVE ===
// How to use: @include respond-above(small) {}
@mixin respond-above($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    @media (min-width: $breakpoint-value) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

// === RESPOND BELOW ===
// How to use: @include respond-below(small) {}
@mixin respond-below($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

// === RESPOND BETWEEN ===
// How to use: @include respond-between(small, medium) {};
@mixin respond-between($lower, $upper) {
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);
    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }
  } @else {
    @if (map-has-key($breakpoints, $lower) == false) {
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }
    @if (map-has-key($breakpoints, $upper) == false) {
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}

@mixin flex($alight: flex-start, $justify: flex-start, $wrap: nowrap) {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  align-items: $alight;
  justify-content: $justify;
  flex-wrap: $wrap;
}

@mixin limit-line-text($number: null) {
  overflow: hidden;
  @if type-of($number) != number {
    text-overflow: ellipsis;
    white-space: nowrap;
  } @else {
    display: box;
    display: -moz-box;
    display: -webkit-box;
    display: -ms-box;
    box-orient: vertical;
    -moz-box-orient: vertical;
    -ms-line-clamp: $number;
    -moz-line-clamp: $number;
    -webkit-line-clamp: $number;
    word-wrap: break-word;
    white-space: normal;
    -webkit-box-orient: vertical;
    -moz-box-orient: vertical;
  }
}

@mixin text($size: 1.4, $weight: normal, $height: 1.68, $color: blue-dark) {
  font-size: $size * 1rem;
  font-weight: map-get($font-weight, $weight);
  line-height: $height * 1rem;
  color: map-get($colors, $color);
}

@mixin hideScrollBar {
  &::-webkit-scrollbar {
    display: none;
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
}

@mixin absCenter($direction) {
  position: absolute;
  @if $direction == left {
    left: 50%;
    transform: translateX(-50%);
  }
  @if $direction == top {
    top: 50%;
    transform: translateY(-50%);
  }
  @if $direction == both {
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
  }
}

@mixin hiddenSelectIcon {
  -o-appearance: none;
  -ms-appearance: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
}